.. _2to3-reference:

2to3 - 自动 Python 2 到 3 代码转换
===============================================

.. sectionauthor:: Benjamin Peterson <benjamin@python.org>

2to3 是一个 Python 程序， 它读取 Python 2.x 源代码，然后通过一系列的 *修复器* 
将源代码转换为正确的 Python 3.x 代码.  标准库包含丰富的修复器它几乎可以处理所有的代码
2to3 库为 :mod:`lib2to3` ，它是一个灵活通用的库， 因此它允许你给 2to3 编写自己的修复器
:mod:`lib2to3` 还可以适配 Python 代码需要自动被编辑的一般应用程序。


.. _2to3-using:

使用 2to3
----------

2to3 通常会作为一个脚本安装在 Python 解释器上.  它存放的位置为 Python 根目录下面的
:file:`Tools/scripts` 目录下面。

2to3 的基本参数为一个要转换的文件或者目录的列表。目录是递归遍历 Python 源文件的。

下面是一个 Python 2.x 源文件例子, :file:`example.py`::

   def greet(name):
       print "Hello, {0}!".format(name)
   print "What's your name?"
   name = raw_input()
   greet(name)

它可以通过 2to3 的命令行，将其转换为 Python 3.x 代码::

   $ 2to3 example.py

与源文件不同的地方会打印出来.  2to3 也可以将需要修改的部分写回源文件。
(一个原文件的备份，使用  :option:`-n` )  ， :option:`-w` 表示允许写入改变::

   $ 2to3 -w example.py

转换之后, :file:`example.py` 变为::

   def greet(name):
       print("Hello, {0}!".format(name))
   print("What's your name?")
   name = input()
   greet(name)

注解和额外的缩进将会在转换过程中保留。

默认, 2to3 运行着预备好的 :ref:`predefined fixers <2to3-fixers>` 集合.  使用
:option:`-l` 列出所有可用的修复器.  运行一个显式的修复器集合使用 :option:`-f`.  
相反 :option:`-x` 显式的禁止一个修复器.  
下面这个例子仅运行 ``imports`` 和 ``has_key`` 修复器::

   $ 2to3 -f imports -f has_key example.py

这个命令运行除了 ``apply`` 之外的每一个修复器::

   $ 2to3 -x apply example.py

某些修复器是 *显式的*, 意味着它们默认不会运行，必需在命令后面指明。
下面这里，除了默认的修复器，还运行了 ``idioms`` ::

   $ 2to3 -f all -f idioms example.py

注意怎样传递 ``all`` 来开启所有的默认修复器.

某些时候 2to3 会在你的源代码中找到一个需要改变的地方, 但是
2to3 无法自动修复。 在这种情况下 2to3 会在底下输出一个警告来告诉你需要修改之处。
为了得到没有问题的 3.x 代码，你应该定位到警告处。

2to3 还可以重构 doctests.  开启这种模式，使用 :option:`-d` 。注意 *仅仅* 
doctests 会被重构。 这也不需要这个模块是正确的 Python 。 还有就是
resT 文档中的 doctest 例子也可以通过这个选项重构。

:option:`-v` 选项允许你在转换的过程中，输出更多的信息。

由于某些输出语句，能够像方法调用那样解析或者是语句, 2to3 不能一直读取包含 print 方法的文件。
当 2to3 发现有 ``from __future__ import print_function`` 编译器指令， 它会针对于解释器的改变内部的
语法，将 :func:`print` 作为函数处理。 这种改变可以通过加上 :option:`-p` 选项手动处理。 使用
:option:`-p` 来在代码上运行修复器， 这将会包含有这个 print 语句的转换。

:option:`-o` 或者 :option:`--output-dir` 选项允许指定一个可选目录来写入转换处理输出的文件。
:option:`-n` 选项用来备份文件很有必要，但在不重写输入文件的情况下，它没有意义。

.. versionadded:: 3.2.3
   增加了 :option:`-o` 。

:option:`-W` 或者 :option:`--write-unchanged-files` 告诉 2to3 即使没有什么改变时也输出文件。
这和 :option:`-o` 一起使用时非常有用，它可以将整个 Python 代码的树结构从一个目录拷贝到另外一个目录。
相反，如果不跟上 :option:`-w` ，它没有什么实际意义。

.. versionadded:: 3.2.3
   增加 :option:`-W` 选项.

:option:`--add-suffix` 选项指定一个字符串加到所有的输出文件当中。
如果将其作为备份，这时需要用到 :option:`-n` ，如果只是写入到不同的文件名，那就没有必要::

   $ 2to3 -n -W --add-suffix=3 example.py

这会生成一个 ``example.py3`` 文件.

.. versionadded:: 3.2.3
   增加 :option:`--add-suffix` 选项.

将整个项目从一个目录转换到另外一个目录使用::

   $ 2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode


.. _2to3-fixers:

修复器
------

每一步的转代码都封装了一个修复器.  命令 ``2to3 -l`` 
可以将它们列出来.  就像前面的 :ref:`documented above <2to3-using>`, 每个修复器都能够
单独关闭和打开。下面是它们的详细描述。


.. 2to3fixer:: apply

   移除使用 :func:`apply`.  例如 ``apply(function, *args, **kwargs)`` 
   转换为 ``function(*args, **kwargs)``.

.. 2to3fixer:: asserts

   替换低版本的 :mod:`unittest` 方法名为正确的.

   ================================  ==========================================
   From                              To
   ================================  ==========================================
   ``failUnlessEqual(a, b)``         :meth:`assertEqual(a, b)
                                     <unittest.TestCase.assertEqual>`
   ``assertEquals(a, b)``            :meth:`assertEqual(a, b)
                                     <unittest.TestCase.assertEqual>`
   ``failIfEqual(a, b)``             :meth:`assertNotEqual(a, b)
                                     <unittest.TestCase.assertNotEqual>`
   ``assertNotEquals(a, b)``         :meth:`assertNotEqual(a, b)
                                     <unittest.TestCase.assertNotEqual>`
   ``failUnless(a)``                 :meth:`assertTrue(a)
                                     <unittest.TestCase.assertTrue>`
   ``assert_(a)``                    :meth:`assertTrue(a)
                                     <unittest.TestCase.assertTrue>`
   ``failIf(a)``                     :meth:`assertFalse(a)
                                     <unittest.TestCase.assertFalse>`
   ``failUnlessRaises(exc, cal)``    :meth:`assertRaises(exc, cal)
                                     <unittest.TestCase.assertRaises>`
   ``failUnlessAlmostEqual(a, b)``   :meth:`assertAlmostEqual(a, b)
                                     <unittest.TestCase.assertAlmostEqual>`
   ``assertAlmostEquals(a, b)``      :meth:`assertAlmostEqual(a, b)
                                     <unittest.TestCase.assertAlmostEqual>`
   ``failIfAlmostEqual(a, b)``       :meth:`assertNotAlmostEqual(a, b)
                                     <unittest.TestCase.assertNotAlmostEqual>`
   ``assertNotAlmostEquals(a, b)``   :meth:`assertNotAlmostEqual(a, b)
                                     <unittest.TestCase.assertNotAlmostEqual>`
   ================================  ==========================================

.. 2to3fixer:: basestring

   转换 :class:`basestring` 为 :class:`str`.

.. 2to3fixer:: buffer

   转换 :class:`buffer` 为 :class:`memoryview`.  这个修复器是可选的。
   因为 :class:`memoryview` API 是与  :class:`buffer` 相似但并不完全相同。

.. 2to3fixer:: callable

   转换 ``callable(x)`` 为 ``isinstance(x, collections.Callable)``, 如果需要增加一个
   :mod:`collections` 导入. 注意在 Python 3.2 中 ``callable(x)`` 是有返回的,
   因此如果你不打算支持 Python 3.1, 你可以禁用掉这个修复器.

.. 2to3fixer:: dict

   修复字典迭代器方法.  :meth:`dict.iteritems` 转换为
   :meth:`dict.items`, :meth:`dict.iterkeys` 为 :meth:`dict.keys`, 
   :meth:`dict.itervalues` 为 :meth:`dict.values`.  同理,
   :meth:`dict.viewitems`, :meth:`dict.viewkeys` 和 :meth:`dict.viewvalues` 会分
   别转换为 :meth:`dict.items`, :meth:`dict.keys` 和
   :meth:`dict.values`.  它还包裹着已经存在使用的 :meth:`dict.items`,
   :meth:`dict.keys`, 和 :meth:`dict.values` 为一个 :class:`list` 的调用方式。

.. 2to3fixer:: except

   转换 ``except X, T`` 为 ``except X as T`` 。

.. 2to3fixer:: exec

   转换 ``exec`` 语句为 :func:`exec` 函数.

.. 2to3fixer:: execfile

   移除使用 :func:`execfile`.  这个 :func:`execfile` 参数是包裹在
   :func:`open`, :func:`compile`, 和 :func:`exec` 的调用中。

.. 2to3fixer:: exitfunc

   改变 :attr:`sys.exitfunc` 的赋值，使用 :mod:`atexit` 模块。

.. 2to3fixer:: filter

   包裹 :func:`filter` 使用为 :class:`list` 调用.

.. 2to3fixer:: funcattrs

   修复方法属性，对其重命名。例如,
   ``my_function.func_closure`` 转换为 ``my_function.__closure__``.

.. 2to3fixer:: future

   移除 ``from __future__ import new_feature`` 语句.

.. 2to3fixer:: getcwdu

   重命名 :func:`os.getcwdu` 为 :func:`os.getcwd`.

.. 2to3fixer:: has_key

   改变 ``dict.has_key(key)`` 为 ``key in dict``.

.. 2to3fixer:: idioms

   这个修复器选项执行多个转换，使得 Python 代码更加的地道
   类型比较像 ``type(x) is SomeClass`` 和
   ``type(x) == SomeClass`` 会转换为 ``isinstance(x, SomeClass)``.
   ``while 1`` 会变成 ``while True``.  这个修复器还会尝试在合适的地方使用
   :func:`sorted` .  例如, 这个模块 ::

       L = list(some_iterable)
       L.sort()

   会变成 ::

      L = sorted(some_iterable)

.. 2to3fixer:: import

   发现兄弟姐妹导入然后将它们转换为相对导入.

.. 2to3fixer:: imports

   在标准库中处理模块重命名.

.. 2to3fixer:: imports2

   在标准库中处理其他模块的命名。它是从
   :2to3fixer:`imports` 分离出来的修复器， 是由于技术上的限制。

.. 2to3fixer:: input

   转换 ``input(prompt)`` 为 ``eval(input(prompt))``

.. 2to3fixer:: intern

   转换 :func:`intern` 为 :func:`sys.intern`.

.. 2to3fixer:: isinstance

   在 :func:`isinstance` 的第二个参数上修复重复类型.  例如
   , ``isinstance(x, (int, int))`` 会转化为 ``isinstance(x,
   (int))``.

.. 2to3fixer:: itertools_imports

   移除 :func:`itertools.ifilter`, :func:`itertools.izip`, 和
   :func:`itertools.imap` 导入.   :func:`itertools.ifilterfalse` 的导入变为
   :func:`itertools.filterfalse`.

.. 2to3fixer:: itertools

   改变使用 :func:`itertools.ifilter`, :func:`itertools.izip`, and
   :func:`itertools.imap` 为它们相等的内置方法.
   :func:`itertools.ifilterfalse` 改变为 :func:`itertools.filterfalse`.

.. 2to3fixer:: long

   重命名 :class:`long` 为 :class:`int`.

.. 2to3fixer:: map

   包裹 :func:`map` 到一个 :class:`list` 调用.  它也改变 ``map(None, x)``
   为 ``list(x)``.  使用 ``from future_builtins import map`` 来禁用这个
   修复器.

.. 2to3fixer:: metaclass

   转换老的 metaclass 语法 ( 在类体里面的 ``__metaclass__ = Meta`` in the class ) 
   为新的 (``class X(metaclass=Meta)``).

.. 2to3fixer:: methodattrs

   修复老的方法属性名字。例如 ``meth.im_func`` 转换为 ``meth.__func__``.

.. 2to3fixer:: ne

   转换老的不相等的语法, ``<>``, 为 ``!=``.

.. 2to3fixer:: next

   转换使用迭代器中的 :meth:`~iterator.next` 方法为
   :func:`next` 函数.  并重命名 :meth:`next` 方法为
   :meth:`~iterator.__next__`.

.. 2to3fixer:: nonzero

   重命名 :meth:`__nonzero__` 为 :meth:`~object.__bool__`.

.. 2to3fixer:: numliterals

   转换八进制常量为新的语法.

.. 2to3fixer:: operator

   在 :mod:`operator` 模块中转换调用不同的函数为其他相对的函数调用，
   如果需要, 正确的 ``import``
   statements 会被加上, 如. ``import collections``.  会做下面这些映射:

   ==================================  ==========================================
   From                                To
   ==================================  ==========================================
   ``operator.isCallable(obj)``        ``hasattr(obj, '__call__')``
   ``operator.sequenceIncludes(obj)``  ``operator.contains(obj)``
   ``operator.isSequenceType(obj)``    ``isinstance(obj, collections.Sequence)``
   ``operator.isMappingType(obj)``     ``isinstance(obj, collections.Mapping)``
   ``operator.isNumberType(obj)``      ``isinstance(obj, numbers.Number)``
   ``operator.repeat(obj, n)``         ``operator.mul(obj, n)``
   ``operator.irepeat(obj, n)``        ``operator.imul(obj, n)``
   ==================================  ==========================================

.. 2to3fixer:: paren

   在列表解析中在需要的地方. 例如 ``[x for x in 1, 2]`` 变为 ``[x for x in (1, 2)]``.

.. 2to3fixer:: print

   转换 ``print`` 语句为 :func:`print` 函数.

.. 2to3fixer:: raise

   转换``raise E, V`` 为 ``raise E(V)``, 和 ``raise E, V, T`` 为 ``raise
   E(V).with_traceback(T)``.  如果 ``E`` 是一个元组, 转换将不正确，
   因为对于异常的替代元组已经在3.0中移除.

.. 2to3fixer:: raw_input

   转换 :func:`raw_input` 为 :func:`input`.

.. 2to3fixer:: reduce

   处理移动 :func:`reduce` 为 :func:`functools.reduce`.

.. 2to3fixer:: reload

   转换 :func:`reload` 为 :func:`imp.reload`.

.. 2to3fixer:: renames

   改变 :data:`sys.maxint` 为 :data:`sys.maxsize`.

.. 2to3fixer:: repr

   转换那些 repr 为 :func:`repr` 函数.

.. 2to3fixer:: set_literal

   替换使用 :class:`set` 构造器为集合常量.  这个修复器可选.

.. 2to3fixer:: standarderror

   重命名 :exc:`StandardError` 为 :exc:`Exception`.

.. 2to3fixer:: sys_exc

   改变即将去除的 :data:`sys.exc_value`, :data:`sys.exc_type`,
   :data:`sys.exc_traceback` 为使用 :func:`sys.exc_info`.

.. 2to3fixer:: throw

   修复在生成器中的 :meth:`throw` 方法改变的 API .

.. 2to3fixer:: tuple_params

   移除隐示的元组参数解包.  这个修复器插入了零时变量.

.. 2to3fixer:: types

   修复从移除了一些成员的 :mod:`types` 模块的错误代码.

.. 2to3fixer:: unicode

   重命名 :class:`unicode` 为 :class:`str`.

.. 2to3fixer:: urllib

   处理重命名 :mod:`urllib` 和 :mod:`urllib2` 为 :mod:`urllib` 包。

.. 2to3fixer:: ws_comma

   移除来自逗号分割选项的多余空格.  这个修复器可选.

.. 2to3fixer:: xrange

   重命名 :func:`xrange` 为 :func:`range` 并且包裹已存在的 :func:`range` 调用为 :class:`list`.

.. 2to3fixer:: xreadlines

   改变 ``for x in file.xreadlines()`` 为 ``for x in file``.

.. 2to3fixer:: zip

   报告 :func:`zip` 使用为一个 :class:`list` 调用.  当
   ``from future_builtins import zip`` 出现时，这个修复器会被禁用.


:mod:`lib2to3` - 2to3 的库
-------------------------------

.. module:: lib2to3
   :synopsis: the 2to3 library
.. moduleauthor:: Guido van Rossum
.. moduleauthor:: Collin Winter
.. moduleauthor:: Benjamin Peterson <benjamin@python.org>


.. note::

   应该考虑到 :mod:`lib2to3` API 是不稳定的并且在未来是会有大大改动的.

.. XXX 什么是公共的接口?
